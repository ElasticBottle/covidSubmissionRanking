{"version":3,"sources":["components/table/table.module.css","App.module.css","components/sequenceTable/sequenceTable.module.css","components/table/table.js","services/endpoint.js","services/sequenceTableData.js","services/config.js","util/addThousandSeparators.js","components/sequenceTable/sequenceTable.js","util/useInterval.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","className","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","e","target","placeholder","style","fontSize","border","Table","isLoading","columns","data","barCol","downloadFileName","disclaimer","csvHeader","map","val","header","label","Header","key","accessor","useTable","autoResetPage","initialState","pageIndex","pageSize","useGlobalFilter","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","state","TableStyle","tableWrap","spinnerContainer","Spinner","animation","table","hover","size","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","cells","cell","getCellProps","css","width","Row","paginationControl","Col","xs","md","filename","textDecoration","sm","Button","variant","onClick","disabled","endpoint","Axio","require","getSequenceData","a","get","concat","then","result","catch","err","console","log","Axios","addThousandSeparator","valueString","toString","x","split","x1","x2","rgx","test","replace","SequenceTable","config","setIsLoading","useRef","setBarCol","title","setTitle","setDisclaimer","setData","fieldToAddCommas","updateData","useCallback","fields","item","forEach","field","addThousandSeparators","current","useEffect","sequenceTableTitle","getSequenceTableTitle","sequenceTableBarCol","getSequenceTableBarCol","setting","sequenceTableHeaders","getSequenceTableHeader","sequenceTableDisclaimer","getSequenceTableDisclaimer","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","SequenceTableStyle","fullWidth","App","setConfig","getConfig","AppStyle","app","seqTable","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3372d771.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableWrap\":\"table_tableWrap__2lYj0\",\"table\":\"table_table__orQ_Q\",\"bar\":\"table_bar__ZB01Y\",\"spinnerContainer\":\"table_spinnerContainer__3VxqN\",\"disclaimer\":\"table_disclaimer__2YZDm\",\"paginationControl\":\"table_paginationControl__2aY2e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"seqTable\":\"App_seqTable__a9Xm0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"sequenceTable_title__x4oOe\",\"fullWidth\":\"sequenceTable_fullWidth__2Jg08\"};","import React from \"react\";\r\nimport BTable from \"react-bootstrap/Table\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { CSVLink } from \"react-csv\";\r\nimport {\r\n  usePagination,\r\n  useTable,\r\n  useGlobalFilter,\r\n  useAsyncDebounce,\r\n} from \"react-table\";\r\n/** @jsxImportSource @emotion/react */\r\nimport { css, jsx } from \"@emotion/react\";\r\n\r\nimport TableStyle from \"./table.module.css\";\r\n\r\nfunction GlobalFilter({\r\n  preGlobalFilteredRows,\r\n  globalFilter,\r\n  setGlobalFilter,\r\n  className,\r\n}) {\r\n  const count = preGlobalFilteredRows.length;\r\n  const [value, setValue] = React.useState(globalFilter);\r\n  const onChange = useAsyncDebounce((value) => {\r\n    setGlobalFilter(value || undefined);\r\n  }, 200);\r\n\r\n  return (\r\n    <span className={className}>\r\n      Search:{\" \"}\r\n      <input\r\n        value={value || \"\"}\r\n        onChange={(e) => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n        placeholder={`${count} records...`}\r\n        style={{\r\n          fontSize: \"1.1rem\",\r\n          border: \"0\",\r\n        }}\r\n      />\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction Table({\r\n  isLoading,\r\n  columns,\r\n  data,\r\n  barCol,\r\n  downloadFileName,\r\n  disclaimer = \"\",\r\n}) {\r\n  const csvHeader = columns.map((val) => {\r\n    const header = {};\r\n    header.label = val.Header;\r\n    header.key = val.accessor;\r\n    return header;\r\n  });\r\n\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n\r\n    //pagination stuff\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    // setPageSize,\r\n    state: { pageIndex },\r\n    // state: { pageIndex },\r\n\r\n    //global filter\r\n    state,\r\n    preGlobalFilteredRows,\r\n    setGlobalFilter,\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      autoResetPage: false,\r\n      initialState: { pageIndex: 0, pageSize: 10 },\r\n    },\r\n    useGlobalFilter,\r\n    usePagination\r\n  );\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <div className={TableStyle.tableWrap}>\r\n      <GlobalFilter\r\n        preGlobalFilteredRows={preGlobalFilteredRows}\r\n        globalFilter={state.globalFilter}\r\n        setGlobalFilter={setGlobalFilter}\r\n      />\r\n      {isLoading ? (\r\n        <div className={TableStyle.spinnerContainer}>\r\n          <Spinner animation=\"border\" />\r\n        </div>\r\n      ) : (\r\n        <BTable\r\n          className={`${TableStyle.table} mt-3`}\r\n          hover\r\n          size=\"sm\"\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()} key={i}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td\r\n                        {...cell.getCellProps()}\r\n                        css={\r\n                          cell.column.Header === barCol\r\n                            ? css`\r\n                                display: flex;\r\n                                text-align: left;\r\n                                &:before {\r\n                                  content: \"\";\r\n                                  display: flex;\r\n                                  align-items: center;\r\n                                  justify-content: center;\r\n                                  height: inherit;\r\n                                  width: calc(\r\n                                    ${cell.column.width}px *\r\n                                      (${cell.value} / 100)\r\n                                  );\r\n                                  margin-right: 10px;\r\n                                  background: lightgray;\r\n                                }\r\n                                &:hover:before {\r\n                                  background: gray;\r\n                                }\r\n                              `\r\n                            : css``\r\n                        }\r\n                      >\r\n                        {cell.render(\"Cell\")}\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </BTable>\r\n      )}\r\n      {disclaimer === \"\" ? null : (\r\n        <div className={`${TableStyle.disclaimer} mb-3`}>{disclaimer}</div>\r\n      )}\r\n      {pageOptions.length === 1 ? (\r\n        <Row className={TableStyle.paginationControl}>\r\n          <Col xs={12} md={6} className=\"mb-3\">\r\n            <CSVLink\r\n              data={data}\r\n              headers={csvHeader}\r\n              filename={downloadFileName}\r\n              className=\"btn-sm btn-light\"\r\n              style={{ textDecoration: \"none\" }}\r\n              target=\"_blank\"\r\n            >\r\n              Download Table\r\n            </CSVLink>\r\n          </Col>\r\n        </Row>\r\n      ) : (\r\n        <Row className={TableStyle.paginationControl}>\r\n          <Col sm={12} md={6}>\r\n            <Button\r\n              variant=\"light\"\r\n              size=\"sm\"\r\n              onClick={() => gotoPage(0)}\r\n              disabled={!canPreviousPage}\r\n            >\r\n              {\"<<\"}\r\n            </Button>\r\n            <Button\r\n              variant=\"light\"\r\n              size=\"sm\"\r\n              onClick={() => previousPage()}\r\n              disabled={!canPreviousPage}\r\n            >\r\n              {\"<\"}\r\n            </Button>\r\n            <Button\r\n              variant=\"light\"\r\n              size=\"sm\"\r\n              onClick={() => nextPage()}\r\n              disabled={!canNextPage}\r\n            >\r\n              {\">\"}\r\n            </Button>\r\n            <Button\r\n              variant=\"light\"\r\n              size=\"sm\"\r\n              onClick={() => gotoPage(pageCount - 1)}\r\n              disabled={!canNextPage}\r\n            >\r\n              {\">>\"}\r\n            </Button>\r\n            <p>\r\n              {\" \"}\r\n              Page <strong>{pageIndex + 1} </strong> of{\" \"}\r\n              <strong>{pageOptions.length}</strong>\r\n            </p>\r\n          </Col>\r\n          <Col xs={12} md={6} className=\"mb-3\">\r\n            <CSVLink\r\n              data={data}\r\n              headers={csvHeader}\r\n              filename={downloadFileName}\r\n              className=\"btn-sm btn-light\"\r\n              style={{ textDecoration: \"none\" }}\r\n              target=\"_blank\"\r\n            >\r\n              Download Table\r\n            </CSVLink>\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","export const endpoint =\r\n  \"https://mendel3.bii.a-star.edu.sg/METHODS/corona/gamma/GISAID/submissionRanking/data/\";\r\n","import { endpoint } from \"./endpoint\";\r\nconst Axio = require(\"axios\");\r\n\r\nexport async function getSequenceData() {\r\n  return process.env.NODE_ENV === \"production\"\r\n    ? Axio.get(endpoint.concat(\"sequenceData.json\"))\r\n        .then((result) => {\r\n          return result.data;\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"err :>> \", err);\r\n          return {};\r\n        })\r\n    : new Promise((res, rej) => {\r\n        setTimeout(() => {\r\n          const sequenceData = require(\"../assets/data/sequenceData.json\");\r\n          res(sequenceData);\r\n        }, 2000);\r\n      });\r\n}\r\n","import { endpoint } from \"./endpoint\";\r\nimport config from \"../assets/data/config.json\";\r\nconst Axios = require(\"axios\");\r\n\r\nexport async function getConfig() {\r\n  return process.env.NODE_ENV === \"production\"\r\n    ? Axios.get(endpoint.concat(\"config.json\"))\r\n        .then((result) => {\r\n          return result.data;\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"err :>> \", err);\r\n          return {};\r\n        })\r\n    : new Promise((res, rej) => {\r\n        res(config);\r\n      });\r\n}\r\n\r\nexport function getSequenceTableHeader(config, setting = \"default\") {\r\n  return (config.sequenceTableHeaders ?? {})[setting] ?? [];\r\n}\r\n\r\nexport function getSequenceTableTitle(config) {\r\n  return config.sequenceTableTitle ?? \"\";\r\n}\r\nexport function getSequenceTableDisclaimer(config) {\r\n  return config.sequenceTableDisclaimer ?? \"\";\r\n}\r\n\r\nexport function getSequenceTableBarCol(config) {\r\n  return config.sequenceTableBarCol;\r\n}\r\n","export function addThousandSeparators(result, fields) {\r\n  for (const item of result) {\r\n    typeof fields === \"string\"\r\n      ? (item[fields] = addThousandSeparator(item[fields]))\r\n      : fields.forEach((field) => {\r\n          item[field] = addThousandSeparator(item[field]);\r\n        });\r\n  }\r\n  return result;\r\n}\r\n// Credit to http://www.mredkj.com/javascript/nfbasic.html\r\nfunction addThousandSeparator(value = \"\") {\r\n  const valueString = value.toString();\r\n  const x = valueString.split(\".\");\r\n  let x1 = x[0];\r\n  const x2 = x.length > 1 ? \".\" + x[1] : \"\";\r\n  const rgx = /(\\d+)(\\d{3})/;\r\n  while (rgx.test(x1)) {\r\n    x1 = x1.replace(rgx, \"$1,$2\");\r\n  }\r\n  return x1.concat(x2);\r\n}\r\n","import React from \"react\";\r\n\r\nimport Table from \"../table/table\";\r\nimport { getSequenceData } from \"../../services/sequenceTableData\";\r\nimport {\r\n  getSequenceTableTitle,\r\n  getSequenceTableHeader,\r\n  getSequenceTableDisclaimer,\r\n  getSequenceTableBarCol,\r\n} from \"../../services/config\";\r\nimport { useInterval } from \"../../util/useInterval\";\r\nimport { addThousandSeparators } from \"../../util/addThousandSeparators\";\r\nimport SequenceTableStyle from \"./sequenceTable.module.css\";\r\n\r\nconst SequenceTable = ({ config }) => {\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  const columns = React.useRef([]);\r\n  const [barCol, setBarCol] = React.useState(\"\");\r\n  const [title, setTitle] = React.useState(\"\");\r\n  const [disclaimer, setDisclaimer] = React.useState(\"\");\r\n\r\n  const [data, setData] = React.useState([]);\r\n  const fieldToAddCommas = React.useRef([\r\n    \"reported_cases\",\r\n    \"samples_sequenced\",\r\n  ]);\r\n  const updateData = React.useCallback((data) => {\r\n    setIsLoading(false);\r\n    setData(addThousandSeparators(data, fieldToAddCommas.current));\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    setIsLoading(true);\r\n    setTitle(getSequenceTableTitle(config));\r\n    setBarCol(getSequenceTableBarCol(config));\r\n    columns.current = getSequenceTableHeader(config);\r\n    setDisclaimer(getSequenceTableDisclaimer(config));\r\n\r\n    getSequenceData().then((result) => {\r\n      updateData(result);\r\n      setIsLoading(false);\r\n    });\r\n  }, [updateData, config]);\r\n\r\n  const fiveMinutes = 1000 * 60 * 5; // in milliseconds\r\n  useInterval(() => {\r\n    getSequenceData().then((result) => updateData(result));\r\n  }, fiveMinutes);\r\n\r\n  return (\r\n    <div className={`${SequenceTableStyle.fullWidth}`}>\r\n      <h2 className={SequenceTableStyle.title}>\r\n        {title ?? \"Country Submission Count\"}\r\n      </h2>\r\n      <Table\r\n        columns={columns.current}\r\n        data={data}\r\n        barCol={barCol}\r\n        downloadFileName=\"sequenceOFSubmission.csv\"\r\n        isLoading={isLoading}\r\n        disclaimer={disclaimer}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SequenceTable;\r\n","// Credit to: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from \"react\";\nimport AppStyle from \"./App.module.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SequenceTable from \"./components/sequenceTable/sequenceTable\";\nimport { getConfig } from \"./services/config\";\n\nfunction App() {\n  const [config, setConfig] = React.useState({});\n\n  React.useEffect(() => {\n    getConfig().then((result) => setConfig(result));\n  }, []);\n  return (\n    <Row className={AppStyle.app}>\n      <Col className=\"mt-3\">\n        <div className={AppStyle.seqTable}>\n          <SequenceTable config={config} />\n        </div>\n      </Col>\n    </Row>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}